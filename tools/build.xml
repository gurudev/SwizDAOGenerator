<project name="SwizDAOGenerator-1.0" default="main" >

	<!--
	User specific the global configuration properties.
	-->
	<property file="project.properties" />
	<property file="config/SwizDAOGenerator.properties" />
	<property file="config/log.properties" />

	<target name="main" depends="create-SwizDAO-directories" />
	 	  
 	<!-- create default SwizDAO directories -->
	<target name="create-SwizDAO-directories" >
		<echo>${log.create.SwizDAO.directories.message}</echo>
        <mkdir dir="${project.url}/${control.dir}" />
		<mkdir dir="${project.url}/${services.dir}" />
		<mkdir dir="${project.url}/${events.dir}" />
		<mkdir dir="${project.url}/utils" />
		<mkdir dir="${project.url}/helpers" />
		<mkdir dir="${project.url}/${view.dir}" />
		<mkdir dir="${project.url}/${view.dir}/events" />
		<mkdir dir="${project.url}/${view.dir}/components" />
		<mkdir dir="${project.url}/${view.dir}/mediators" />
		<mkdir dir="${project.url}/${view.dir}/helpers" />
		<mkdir dir="${project.url}/${view.dir}/presenters" />
		<mkdir dir="${project.url}/${view.dir}/signals" />
        <mkdir dir="${project.url}/${model.dir}/${vo.dir}" />
	</target>

	<!-- move libraries and source code -->
	<target name="move-libraries-and-source-code" >
		<echo>${log.create.SwizDAO.libraries.message}</echo>
        <echo>Copy libs folder</echo>
		<copy todir="${project.root.url}/libs">
			<fileset dir="${templates.dir}/libs"/>
  		</copy>
	</target>

	<!-- Generate Main class, context, css & base service class -->
	<target name="create-main-class-context-and-base-service" >
		<echo>${log.create.main.class.and.context}</echo>
		<copy file="${SwizDAO.templates.dir}/ProjectContext.as"
			  tofile="${project.url}/${project.name}Context.as"
			  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
	           		<token key="SwizDAO.dir" value="${SwizDAO.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		<echo>Copy ${SwizDAO.templates.dir}/Main.mxml</echo>
		<copy file="${SwizDAO.templates.dir}/Main.mxml"
			  tofile="${project.main.url}/Main.mxml"
			  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
	            </replacetokens>
	        </filterchain>
	    </copy>

		<echo>Copy ${SwizDAO.templates.dir}/Main.css</echo>
		<copy file="${SwizDAO.templates.dir}/Main.css"
			  tofile="${project.main.url}/Main.css"
			  overwrite="${overwrite.files}" >
	    </copy>

	    <copy file="${SwizDAO.templates.dir}/BaseService.as"
	    	tofile="${project.url}/${services.dir}/BaseService.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="services.dir " value="${services.dir}" />
						<token key="gesture" value="${gesture}" />
			           	<token key="upperCaseGesture" value="${upperCaseGesture}" />
		           		<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
	            </replacetokens>
	        </filterchain>
	    </copy>

	</target>
 		   

	<!-- create ValueObject class -->
	<target name="create-value-object" >
		<echo>${log.value.object.message}</echo>

	    <copy file="${SwizDAO.templates.dir}/ValueObject.as"
	    	tofile="${project.url}/${model.dir}/${vo.dir}/${gesture}VO.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}VO" />
                    	<token key="vo.dir" value="${vo.dir}" />
                    	<token key="model.dir" value="${model.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
	</target>

	<!-- create view-mediator class -->
	<target name="create-view-mediator" >
		<echo>${log.view.mediator.message}</echo>

	    <convertToUpperCase property="upperCaseGesture" value="${gesture}" />
	    <convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

	    <copy file="${SwizDAO.templates.dir}/Mediator.as"
	    	tofile="${project.url}/${view.dir}/mediators/${gesture}Mediator.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="view.dir" value="${view.dir}" />
        		        <token key="upperCaseGesture" value="${upperCaseGesture}" />
        	           	<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
	            </replacetokens>
	        </filterchain>
	    </copy>

	    <copy file="${SwizDAO.templates.dir}/View.mxml"
	    	tofile="${project.url}/${view.dir}/${gesture}View.mxml" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="view.dir" value="${view.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>

		<echo>Register mediator with context class</echo>
		<replace file="${project.url}/${project.name}Context.as"
			     token="// todo: Add View"
			     value="// todo: Add View${line.separator}
					      mediatorMap.mapView(${gesture}View, ${gesture}Mediator);"
			     />

	</target> 
    <!-- private -->
	<scriptdef name="convertToUpperCase" language="javascript" >
		<attribute name="property" />
		<attribute name="value"    />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toUpperCase() );
	</scriptdef>

	<scriptdef name="convertToLowerCase" language="javascript" >
		<attribute name="property" />
		<attribute name="value"    />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toLowerCase() );
	</scriptdef>

	<scriptdef name="convertToPascalCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
		val = attributes.get("value");
		val = val.substr(0,1).toUpperCase() + val.substr(1);
		project.setNewProperty( attributes.get("property"), val);
	</scriptdef>

	<scriptdef name="convertToCamelCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
		val = attributes.get("value");
		val = val.substr(0,1).toLowerCase() + val.substr(1);
		project.setNewProperty( attributes.get("property"), val);
	</scriptdef>

	<scriptdef name="setTabValue" language="javascript">
		<attribute name="property" />
		project.setNewProperty( attributes.get("property"), "\t");
	</scriptdef>

</project>